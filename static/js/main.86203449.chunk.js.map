{"version":3,"sources":["assets/images/logo.png","components/Header.js","components/Footer.js","services/pokemon.service.js","components/Pokecard.js","pages/Home.js","services/http.service.js","components/Badge.js","components/StatsChart.js","pages/Details.js","router/routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","src","Logo","alt","Footer","Date","getFullYear","searchKantoPokemon","Promise","resolve","reject","pokemons","kanto_pokemons","map","item","Object","keys","length","getPokemonsByName","name","filtered","filter","obj","indexOf","getPokemonsByType","type","a","types","includes","Pokecard","this","props","to","id","image","Component","Home","state","items","pokemonTypes","then","res","setState","searchPokemonsByName","searchPokemonsByType","Container","Row","Col","xs","required","onChange","e","target","value","key","placeholder","api","axios","create","headers","accept","Badge","text","StatsChart","stats","Table","borderless","scope","Details","profile","abilities","characteristic","evolutionTree","prepareProfile","data","weight","height","base_experience","prepareTypes","prepareAbilities","ability","prepareCharacteristic","descriptions","language","description","prepareStats","stat","base_stat","match","params","get","catch","error","apiFetchPokemonDetails","response","console","log","apiFetchPokemonCharacteristic","evolution_tree","forEach","tmp","parseInt","fetchEvolutionTree","lg","join","Routes","basename","process","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.86203449.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bb649d6e.png\";","import React from 'react';\r\nimport Logo from \"../assets/images/logo.png\"\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\">\r\n            <a href=\"/\" className=\"logo\">\r\n                <img src={Logo} alt=\"logo\"></img>\r\n            </a>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>Kanto Pokedex - {new Date().getFullYear()}</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","\r\nimport kanto_pokemons from '../assets/data/kanto_pokemons.json'\r\nimport evolution_tree from '../assets/data/kanto_evolution_tree.json'\r\nimport { filter } from 'lodash';\r\n\r\n\r\nexport const searchKantoPokemon = () => {\r\n    return new Promise((resolve, reject) => {\r\n        let pokemons = kanto_pokemons.map(item => item);\r\n        if (Object.keys(pokemons).length > 0) {\r\n            return resolve(pokemons)\r\n        } else {\r\n            reject();\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport const getPokemonsByName = (name) => {\r\n    return new Promise((resolve, reject) => {\r\n        let pokemons = kanto_pokemons.map(item => item);\r\n        let filtered = filter(pokemons, function (obj) {\r\n            return obj.name.indexOf(name) !== -1;\r\n        });\r\n        if (Object.keys(filtered).length > 0) {\r\n            return resolve(filtered)\r\n        } else {\r\n            reject();\r\n        }\r\n    });\r\n}\r\n\r\nexport const getPokemonsByType = (type) => {\r\n    return new Promise((resolve, reject) => {\r\n        let pokemons = kanto_pokemons.map(item => item);\r\n        let filtered = pokemons.filter(a => a.types.includes(type))\r\n        if (Object.keys(filtered).length > 0) {\r\n            return resolve(filtered)\r\n        } else {\r\n            reject();\r\n        }\r\n    });\r\n}\r\n\r\nexport const fetchEvolutionTree = (id) => {\r\n    return new Promise((resolve, reject) => {\r\n        let pokemons = evolution_tree.map(item => item);\r\n        pokemons.forEach(item => {\r\n            item.id.forEach(tmp => {\r\n                if (tmp === parseInt(id)) {\r\n                    return resolve(item.evolution_tree);\r\n                }\r\n            })\r\n        })\r\n        reject();\r\n    });\r\n}","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Pokecard extends Component {\r\n  render() {\r\n    const { item } = this.props;\r\n\r\n    return (\r\n      <Link to={`/pokemons/${item.id}`}>\r\n        <div className=\"pokecard\">\r\n          <span className=\"pokecard-id\">#{item.id}</span>\r\n          <div className=\"pokecard-image\">\r\n            <img src={item.image} alt={item.name} />\r\n          </div>\r\n          <div className=\"pokecard-body\">\r\n            <h6>{item.name}</h6>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  searchKantoPokemon,\r\n  getPokemonsByName,\r\n  getPokemonsByType\r\n} from \"../services/pokemon.service\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport Pokecard from \"../components/Pokecard\";\r\n\r\nexport default class Home extends Component {\r\n  state = {\r\n    items: [],\r\n    pokemonTypes: [\r\n      \"grass\",\r\n      \"poison\",\r\n      \"fire\",\r\n      \"flying\",\r\n      \"water\",\r\n      \"bug\",\r\n      \"normal\",\r\n      \"electric\",\r\n      \"ground\",\r\n      \"fairy\",\r\n      \"fighting\",\r\n      \"psychic\",\r\n      \"rock\",\r\n      \"steel\",\r\n      \"ice\",\r\n      \"ghost\",\r\n      \"dragon\",\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.searchKantoPokemon();\r\n  }\r\n\r\n  searchKantoPokemon = () => {\r\n    searchKantoPokemon().then((res) => this.setState({ items: res }));\r\n  };\r\n\r\n  searchPokemonsByName = (name) => {\r\n    if (name !== \"\") {\r\n      getPokemonsByName(name).then((res) => this.setState({ items: res }));\r\n    } else {\r\n      searchKantoPokemon().then((res) => this.setState({ items: res }));\r\n    }\r\n  };\r\n\r\n  searchPokemonsByType = (type) => {\r\n    if (type !== \"\") {\r\n      getPokemonsByType(type).then((res) => this.setState({ items: res }));\r\n    } else {\r\n      searchKantoPokemon().then((res) => this.setState({ items: res }));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { items, pokemonTypes } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        {/* Filter */}\r\n        <Row>\r\n          <Col xs={4}>\r\n            <div className=\"nes-select\">\r\n              <select required id=\"default_select\" onChange={(e) => this.searchPokemonsByType(e.target.value)}>\r\n                <option value=\"\">All</option>\r\n                {pokemonTypes.map((item) => (\r\n                  <option value={item} key={item}>\r\n                    {item}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </Col>\r\n          <Col xs={8}>\r\n            <div className=\"nes-field\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"name_field\"\r\n                className=\"nes-input\"\r\n                placeholder=\"Search by name...\"\r\n                onChange={(e) => this.searchPokemonsByName(e.target.value)}\r\n              ></input>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        {/* Pokelist */}\r\n        <Row>\r\n          {items.length &&\r\n            items.map((item) => (\r\n              <Col key={item.id}>\r\n                <Pokecard item={item} key={item.id} />\r\n              </Col>\r\n            ))}\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\"\r\n\r\n/**\r\n * Base Request\r\n */\r\nconst api = axios.create({\r\n    headers: {\r\n        accept: 'application/json',\r\n    },\r\n});\r\n\r\n/**\r\n * Default Image Url\r\n */\r\nconst imageUrl = \"https://pokeres.bastionbot.org/images/pokemon/\";\r\n\r\n/**\r\n * Search Pokemon Details By Id\r\n */\r\nexport const apiFetchPokemonDetails = (id) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        return api.get(`https://pokeapi.co/api/v2/pokemon/${id}`)\r\n            .then(res => {\r\n                res.data.image = `${imageUrl}${id}.png`\r\n                resolve(res);\r\n            }).catch(error => reject(error));\r\n    });\r\n}\r\n\r\n/**\r\n * Search Pokemon Characteristic \r\n */\r\nexport const apiFetchPokemonCharacteristic = (id) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        return api.get(`https://pokeapi.co/api/v2/characteristic/${id}`)\r\n            .then(response => resolve(response))\r\n            .catch(error => reject(error));\r\n    });\r\n}\r\n\r\n// https://pokeapi.co/api/v2/characteristic/2\r\n\r\nexport default api;","import React, { Component } from \"react\"\r\n\r\nexport default class Badge extends Component {\r\n\r\n    render() {\r\n\r\n        let text = this.props.text\r\n\r\n        return (\r\n            <div className={`badge badge-sm badge-${text} `}>{text}</ div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nexport default class StatsChart extends Component {\r\n  render() {\r\n    let { stats } = this.props;\r\n\r\n    return (\r\n      <Table borderless className=\"table-sm\">\r\n        <tbody>\r\n          {stats.map((item) => (\r\n            <tr key={item.name}>\r\n              <th scope=\"row\">{item.name}</th>\r\n              <td>{item.value}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  apiFetchPokemonDetails,\r\n  apiFetchPokemonCharacteristic,\r\n} from \"../services/http.service\";\r\nimport { fetchEvolutionTree } from \"../services/pokemon.service\";\r\nimport Badge from \"../components/Badge\";\r\nimport { Col, Row, Container } from \"react-bootstrap\";\r\nimport StatsChart from \"../components/StatsChart\";\r\n\r\nexport default class Details extends Component {\r\n  state = {\r\n    item: {\r\n      profile: {},\r\n      types: [],\r\n      abilities: [],\r\n      characteristic: [],\r\n      stats: [],\r\n      evolutionTree: [],\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n\r\n    apiFetchPokemonDetails(id)\r\n      .then((response) => {\r\n        let { data } = response;\r\n        let profile = this.prepareProfile(data);\r\n        let types = this.prepareTypes(data);\r\n        let abilities = this.prepareAbilities(data);\r\n        let stats = this.prepareStats(data);\r\n        this.setState({\r\n          item: { ...this.state.item, profile, types, abilities, stats },\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    apiFetchPokemonCharacteristic(id)\r\n      .then((response) => {\r\n        let { data } = response;\r\n        let characteristic = this.prepareCharacteristic(data);\r\n        this.setState({ item: { ...this.state.item, characteristic } });\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    fetchEvolutionTree(id)\r\n      .then((response) => {\r\n        let evolutionTree = response;\r\n        this.setState({ item: { ...this.state.item, evolutionTree } });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  prepareProfile = (data) => {\r\n    let { id, name, weight, height, base_experience, image } = data;\r\n    return { id, name, weight, height, base_experience, image };\r\n  };\r\n\r\n  prepareTypes = (data) => {\r\n    return data.types.map((item) => item.type).map((type) => type.name);\r\n  };\r\n\r\n  prepareAbilities = (data) => {\r\n    return data.abilities\r\n      .map((item) => item.ability)\r\n      .map((ability) => ability.name);\r\n  };\r\n\r\n  prepareCharacteristic = (data) => {\r\n    let r = data.descriptions.filter((item) => item.language.name === \"en\");\r\n    return r[0].description;\r\n  };\r\n\r\n  prepareStats = (data) => {\r\n    return data.stats.map((item) => ({\r\n      name: item.stat.name,\r\n      value: item.base_stat,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      profile,\r\n      types,\r\n      abilities,\r\n      characteristic,\r\n      evolutionTree,\r\n      stats,\r\n    } = this.state.item;\r\n\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col lg={4}>\r\n            <div className=\"nes-container \">\r\n              <div className=\"pokemon-image\">\r\n                <img src={profile.image} alt={profile.name} />\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col lg={8}>\r\n            <div className=\"nes-container \">\r\n              <h3 className=\"toUpper\">\r\n                #{profile.id} {profile.name}\r\n              </h3>\r\n\r\n              <div className=\"lists\">\r\n                <ul className=\"nes-list is-disc\">\r\n                  <li>\r\n                    <strong>Type: </strong>\r\n                    {types.map((item) => (\r\n                      <Badge key={item} text={item}></Badge>\r\n                    ))}\r\n                  </li>\r\n                  <li>\r\n                    <strong>Abilities: </strong>\r\n                    {abilities.join(\", \")}\r\n                  </li>\r\n\r\n                  <li>\r\n                    <strong>Weight: </strong>\r\n                    {profile.weight}\r\n                  </li>\r\n                  <li>\r\n                    <strong>Height: </strong>\r\n                    {profile.height}\r\n                  </li>\r\n                  <li>\r\n                    <strong>Characteristic: </strong>\r\n                    {characteristic}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          {stats.length > 0 && (\r\n            <Col>\r\n              <div className=\"nes-container with-title\">\r\n                <p className=\"title\">Stats</p>\r\n                <StatsChart stats={stats} />\r\n              </div>\r\n            </Col>\r\n          )}\r\n\r\n          <Col>\r\n            <div className=\"nes-container with-title pokemon-evolution-tree\">\r\n              <p className=\"title\">Evolutions</p>\r\n              <Row>\r\n                {evolutionTree.length > 0 ? (\r\n                  evolutionTree.map((item) => (\r\n                    <Col key={item.id}>\r\n                      <div className=\"pokemon-evolution-image\">\r\n                        <img src={item.image} alt={item.id}></img>\r\n                      </div>\r\n                      <div className=\"pokemon-evolution-body\">\r\n                        <p>#{item.id}</p>\r\n                        <p>{item.name}</p>\r\n                      </div>\r\n                    </Col>\r\n                  ))\r\n                ) : (\r\n                  <h5>No Evolutions</h5>\r\n                )}\r\n              </Row>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\n/**\r\n * Components\r\n */\r\nimport Home from \"../pages/Home\";\r\nimport Details from \"../pages/Details\";\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/pokemons/:id\" component={Details} />\r\n            <Route path=\"*\" component={Home}></Route>\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport Routes from \"./router/routes\";\r\nimport \"./sass/main.scss\";\r\nimport \"nes.css/css/nes.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"main\">\r\n        <div className=\"main__header\">\r\n          <Header />\r\n        </div>\r\n        <div className=\"main__body\">\r\n          <div className=\"main__body__content\">\r\n            <Routes />\r\n          </div>\r\n        </div>\r\n        <div className=\"main__footer\">\r\n          <Footer />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}